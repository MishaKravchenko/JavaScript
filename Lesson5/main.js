// Реалізовуємо свій компютерний магазин.

// class ComputerShop {
//     constructor(city, street, number, openShop, square, bar) {
//
//         this.city = city || ("No city");
//         this.street = street || ("No street");
//         this.number = number || ("No number");
//         this.openShop = openShop || ("No openShop");
//         this.square = square || ("No square");
//         this.bar = bar || ("No bar");
// let address = (`Our address: ${city}, ${street}, ${number}.
// We are open from ${openShop}`)
//         console.log(address);
//     }
// }
//
// console.log(new ComputerShop("Los Angeles", "Shevchenko", 77, "8:00-20:00", "250m2", true));


// ===
// Необхідно реалізувати базовий клас комютера. Який має лише параметри:
//     Оперативна память.
//     Потужність процесора. (цифра від 0 до 1000)
// Назва.
//     В кожного компютера має бути метод включання.

class Computer {
    constructor(RAM, CPU, name, method) {
        this.RAM = RAM;
        this.CPU = CPU;
        this.name = name;
        this.method = method;
    }
}

let StationaryComputer = new Computer(99, 1000, "BOSCH", "button")
console.log(StationaryComputer);

// ===
// Від базового компютрера треба реалізувати ноутбук.
//     Він має нову властивість дюймаж монітора.
//
//     У нього зявляється нова змінна роботи батареї. Ця змінна визначається як потужність / (дюйми * оперативку)
// ===

class Notebook extends Computer {
    constructor(RAM, CPU, name, method, screen) {
        super(RAM, CPU, name, method);
        this.screen = screen;
        this.battery = CPU/(screen*RAM);
    }
}
let NotebookBasic = new Notebook(55, 900, "STEKO", "ot vinta", 50);
console.log(NotebookBasic);

// Від ноутбука потрібно зробити ультрабук.
//     Він має нову змінну ваги.
//     При включенні ультрабуку має видаватися помилка, якшо вага більша за 2кг та батарея тримаж менше ніж 4 години.
// ===

class Ultrabook extends Notebook{
    constructor(RAM, CPU, name, method, screen, weight) {
        super(RAM, CPU, name, method, screen);
        this.weight = weight;
        this.battery = CPU/(screen*RAM);
         if (method === 'ON' && weight>=2 && this.battery<=4){
             console.log(` - - E R R O R - - check weight and status battery! `);
         }
    }
}
let UltrabookBasic = new Ultrabook(30, 800, "Domestos", "ON", 25, 3);
console.log(UltrabookBasic);


// Від базвого класу потрібно створити базовий ПК.
//     В нього має бути новий метод запуску ігор.
//     Кількість FPS визначається як потужність / опервтивку.
//     Example: `You are playing *GAME_NAME* with *FPS_COUNT* FSP`
//

class ComputerBasic extends Computer{
    constructor(RAM, CPU, name, method, gameName) {
        super(RAM, CPU, name, method);
        this.gameName = gameName;
        this.fps = CPU/ RAM;
        let infoGame = (`You are playing ${gameName} with ${this.fps} FSP`);
        console.log(infoGame);
    }
}
let StationaryComputerBasic = new ComputerBasic(5, 1000, "FAIRY", "s pol tuchka", "Mario");
console.log(StationaryComputerBasic);

// Компютер можна апгрейдити.
//     Потужність процесора можна збільшувати максимум на 10%. Зменшувати її не можна.
//     Оперативку можна збільшити лише в 2 рази. Зменшувати її не можна.
//     Для зміни характеритик мають бути свої методи. Мняти змінну "в лоб" заборонено.
// ===
//пока непонятно шось, потом вернусь, якшо не забуду)



// Від базового ПК необхідно зробити ігровий ПК.
//     Кількість ФПС має бути рівно в 2 рази більший ніж в звичайного ПК.
//     При запуску однієї гри потужніть процесора має падати на 0.1%.
// Якшо потужність процесора менша ніж 500. І оперативка менша за 8 потрібно видати помилку, (алерт, або консоль)
// що на цьому відрі ігри не запускаються.






//______________________________________________________________________________________________________________________________________________________
// РОБОТА В АУДИТОРІЇ
// ______________________________________________________________________________________________________________________________________________________
//
// - Створити функцію конструктор яка дозволяє створювати об'єкти car, з властивостями модель, виробник, рік випуску, максимальна швидкість, об'єм двигуна. додати в об'єкт функції:
// -- drive () - яка виводить в консоль "їдемо зі швидкістю {максимальна швидкість} на годину"
// -- info () - яка виводить всю інформацію про автомобіль
// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed
// -- changeYear (newValue) - змінює рік випуску на значення newValue
// -- addDriver (driver) - приймає об'єкт який "водій" з довільним набором полів, і доавляет його в поточний об'єкт car
//
//
// - Створити клас який дозволяє створювати об'єкти car, з властивостями модель, виробник, рік випуску, максимальна швидкість, об'єм двигуна. додати в об'єкт функції:
// -- drive () - яка виводить в консоль "їдемо зі швидкістю {максимальна швидкість} на годину"
// -- info () - яка виводить всю інформацію про автомобіль
// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed
// -- changeYear (newValue) - змінює рік випуску на значення newValue
// -- addDriver (driver) - приймає об'єкт який "водій" з довільним набором полів, і доавляет його в поточний об'єкт car
//
//
// -створити класс попелюшка з полями ім'я, вік, розмір ноги
// --Створити 10 попелюшок , покласти їх в масив
// --Сторити об'єкт класу "принц" за допомоги класу який має поля ім'я, вік, туфелька яку він знайшов.
// -- за допоиоги циклу знайти яка попелюшка повинна бути з принцом
//
//
// -створити функцію конструктор попелюшка з полями ім'я, вік, розмір ноги
// --Створити 10 попелюшок , покласти їх в масив
// --Сторити об'єкт типу "принц" за допомоги функції конструктора з полями ім'я, вік, туфелька яку він знайшов, та функцію "пошук попелюшки"
// -- функція повинна приймати масив попелюшок, та шукає ту котра йому підходить
//
//
// ______________________________________________________________________________________________________________________________________________________
// Додатково
// ______________________________________________________________________________________________________________________________________________________
//
//
// -- Створити об'єкт car, з властивостями модель, виробник, рік випуску, максимальна швидкість, об'єм двигуна. додати в об'єкт функції:
// -- drive () - яка виводить в консоль "їдемо зі швидкістю {максимальна швидкість} на годину"
// -- info () - яка виводить всю інформацію про автомобіль
// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed
// -- changeYear (newValue) - змінює рік випуску на значення newValue
// -- addDriver (driver) - приймає об'єкт який "водій" з довільним набором полів, і доавляет його в поточний об'єкт car